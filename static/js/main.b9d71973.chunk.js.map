{"version":3,"sources":["redux/to-do/to-do.types.js","redux/to-do/to-do.actions.js","redux/to-do/to-do.selectors.js","components/checkbox-list/checkbox-list.component.jsx","components/done-list/done-list.component.jsx","components/to-do-item-list/to-do-item-list.component.jsx","App.js","redux/to-do/to-do.utils.js","redux/to-do/to-do.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["ToDoActionTypes","FETCH_TODO_START","FETCH_TODO_SUCCESS","FETCH_TODO_FAILURE","ADD_TODO_ITEM","REMOVE_TODO_ITEM","ADD_TODO_TO_DONE","REMOVE_DONE_ITEM","addToDoItem","toDoItem","type","payload","selectToDos","state","todos","selectToDoList","createSelector","toDos","toDoList","selectDoneList","doneList","useStyles","makeStyles","root","width","maxWidth","backgroundColor","blueGrey","mapStateToProps","createStructuredSelector","connect","dispatch","addToDoToDone","item","removeToDoItem","classes","React","useState","checked","setChecked","handleToggle","value","console","log","currentIndex","indexOf","newChecked","push","splice","handleDelete","length","List","className","map","labelId","id","ListItem","role","undefined","dense","button","onClick","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","inputProps","ListItemText","primary","body","ListItemSecondaryAction","IconButton","aria-label","removeDoneItem","handleUndo","ListItemAvatar","Avatar","theme","margin","spacing","newToDo","setNewToDo","noValidate","autoComplete","onSubmit","event","preventDefault","TextField","label","variant","onChange","target","App","getNewId","items","reduce","prev","curr","newToDoList","filter","toDo","newId","newDoneList","INITIAL_STATE","isFetching","errorMessage","toDoReducer","action","todo","done","rootReducer","combineReducers","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9d71973.chunk.js","sourcesContent":["const ToDoActionTypes = {\r\n    FETCH_TODO_START: 'FETCH_TODO_START',\r\n    FETCH_TODO_SUCCESS: 'FETCH_TODO_SUCCESS',\r\n    FETCH_TODO_FAILURE: 'FETCH_TODO_FAILURE',\r\n    ADD_TODO_ITEM: 'ADD_TODO_ITEM',\r\n    REMOVE_TODO_ITEM: 'REMOVE_TODO_ITEM',\r\n    ADD_TODO_TO_DONE: 'ADD_TODO_TO_DONE',\r\n    REMOVE_DONE_ITEM: 'REMOVE_DONE_ITEM'\r\n};\r\n\r\nexport default ToDoActionTypes;\r\n\r\n","import ToDoActionTypes from './to-do.types';\r\n\r\nexport const fetchToDoStart = () => ({\r\n    type: ToDoActionTypes.FETCH_TODO_START\r\n});\r\n\r\nexport const fetchToDoSuccess = (toDoList) => ({\r\n    type: ToDoActionTypes.FETCH_TODO_SUCCESS,\r\n    payload: toDoList\r\n});\r\n\r\nexport const fetchToDoFailure = (errorMessage) => ({\r\n    type: ToDoActionTypes.FETCH_TODO_FAILURE,\r\n    payload: errorMessage\r\n});\r\n\r\nexport const addToDoItem = toDoItem => ({\r\n    type: ToDoActionTypes.ADD_TODO_ITEM,\r\n    payload: toDoItem\r\n});\r\n\r\nexport const removeToDoItem = toDoItem => ({\r\n    type: ToDoActionTypes.REMOVE_TODO_ITEM,\r\n    payload: toDoItem\r\n});\r\n\r\nexport const addToDoToDone = toDoItem => ({\r\n    type: ToDoActionTypes.ADD_TODO_TO_DONE,\r\n    payload: toDoItem\r\n});\r\n\r\nexport const removeDoneItem = doneItem => ({\r\n    type: ToDoActionTypes.REMOVE_DONE_ITEM,\r\n    payload: doneItem\r\n});\r\n\r\n\r\n\r\n","import { createSelector} from 'reselect';\r\n\r\nconst selectToDos = state => state.todos;\r\n\r\nexport const selectToDoList = createSelector(\r\n    [selectToDos],\r\n    toDos => toDos.toDoList\r\n);\r\n\r\nexport const selectDoneList = createSelector(\r\n    [selectToDos],\r\n    toDos => toDos.doneList\r\n);\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport blueGrey from '@material-ui/core/colors/blueGrey';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport { addToDoToDone,removeToDoItem } from '../../redux/to-do/to-do.actions';\r\nimport { selectToDoList } from '../../redux/to-do/to-do.selectors';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: blueGrey[700],\r\n  },\r\n}));\r\n\r\nfunction CheckboxList({ toDoList,addToDoToDone,removeToDoItem }) {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = React.useState([0]);\r\n\r\n  const handleToggle = (value) => () => {\r\n      console.log(value);\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n    addToDoToDone(value);\r\n  };\r\n\r\n  const handleDelete = (value) => () => {\r\n    //   console.log(value);\r\n      removeToDoItem(value);\r\n  }\r\n\r\n  return (\r\n    (toDoList.length>0) ?\r\n    <List className={classes.root}>\r\n      {toDoList.map((value) => {\r\n        //    console.log(value);\r\n        const labelId = `checkbox-list-label-${value.id}`;\r\n\r\n        return (\r\n          <ListItem key={value.id} role={undefined} dense button onClick={handleToggle(value)}>\r\n            <ListItemIcon>\r\n              <Checkbox\r\n                edge=\"start\"\r\n                checked={checked.indexOf(value) !== -1}\r\n                tabIndex={-1}\r\n                disableRipple\r\n                inputProps={{ 'aria-labelledby': labelId }}\r\n              />\r\n            </ListItemIcon>\r\n            <ListItemText id={labelId} primary={value.body} />\r\n            <ListItemSecondaryAction>\r\n              <IconButton edge=\"end\" aria-label=\"delete\" onClick={handleDelete(value)}>\r\n                <DeleteIcon />\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        );\r\n      })}\r\n    </List>\r\n    :\r\n    <div className='to-do-list-empty'>\r\n        <p>Nothing to do</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    toDoList: selectToDoList\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addToDoToDone: item => dispatch(addToDoToDone(item)),\r\n    removeToDoItem: item => dispatch(removeToDoItem(item))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CheckboxList);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport blueGrey from '@material-ui/core/colors/blueGrey';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport UndoIcon from '@material-ui/icons/Undo';\r\n\r\nimport './done-list.styles.scss';\r\n\r\nimport { selectDoneList } from '../../redux/to-do/to-do.selectors';\r\nimport { removeDoneItem,addToDoItem } from '../../redux/to-do/to-do.actions';\r\n\r\nconst useStyles = makeStyles(() => ({\r\nroot: {\r\n     width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: blueGrey[700],\r\n  },\r\n}));\r\n\r\n\r\nfunction InteractiveList({ doneList,removeDoneItem,addToDoItem }) {\r\n    // console.log(doneList);\r\n  const classes = useStyles();\r\n \r\n  const handleDelete = (value) => () => {\r\n    // console.log(value);\r\n    removeDoneItem(value);\r\n    } \r\n\r\n    const handleUndo = (value) => () => {\r\n        // console.log(value);\r\n        removeDoneItem(value);\r\n        addToDoItem(value);\r\n        } \r\n\r\n  return (\r\n        (doneList.length>0)?\r\n        <List className={classes.root} dense={true}>   \r\n            {\r\n               doneList.map((value) => {\r\n                const { id, body } = value;\r\n                return (\r\n                    <ListItem key={id}>\r\n                        <ListItemAvatar>\r\n                            <Avatar>\r\n                                <AssignmentIcon />\r\n                            </Avatar>\r\n                        </ListItemAvatar>\r\n                        <ListItemText className='done-list-item-text' primary={body} />\r\n                        <ListItemSecondaryAction>\r\n                            <IconButton edge=\"end\" aria-label=\"undo\" onClick={handleUndo(value)}>\r\n                                <UndoIcon />\r\n                            </IconButton>\r\n                            <IconButton edge=\"end\" aria-label=\"delete\" onClick={handleDelete(value)}>\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                )\r\n            }) \r\n            }  \r\n        </List>\r\n        :\r\n        <div className='done-list-empty'>\r\n            <p>No tasks done yet</p>\r\n        </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    doneList: selectDoneList\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    removeDoneItem: item => dispatch(removeDoneItem(item)),\r\n    addToDoItem: item => dispatch(addToDoItem(item)),\r\n})\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(InteractiveList);\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CheckboxList from '../checkbox-list/checkbox-list.component';\r\nimport InteractiveList from '../done-list/done-list.component';\r\nimport { addToDoItem } from '../../redux/to-do/to-do.actions';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport blueGrey from '@material-ui/core/colors/blueGrey';\r\n\r\nimport './to-do-item-list.styles.scss';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n        width: '25ch',\r\n        backgroundColor: blueGrey[50],\r\n      },\r\n    },\r\n  }));\r\n\r\nconst ToDoItemList = ({ addToDoItem }) => {\r\n    const classes = useStyles();\r\n    const [newToDo, setNewToDo] = useState({body: ''});\r\n\r\n    const handelChange = (event) => {\r\n        event.preventDefault();\r\n        // console.log(event.target.value);\r\n        setNewToDo({body: event.target.value});\r\n    }\r\n    \r\n    const handelSubmit = event => {\r\n        event.preventDefault();\r\n        \r\n        addToDoItem(newToDo);\r\n        setNewToDo({body: ''})\r\n      }\r\n\r\n    return (\r\n        <div className='to-do-item-list-container'>\r\n            <p>Things to do:</p>\r\n            <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={handelSubmit}>\r\n                <TextField id=\"filled-basic\" \r\n                value={newToDo.body} \r\n                label=\"New To-Do\" \r\n                variant=\"filled\" \r\n                onChange={handelChange} \r\n                />\r\n            </form>\r\n            <CheckboxList />\r\n            <p>Done:</p>\r\n            <InteractiveList />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addToDoItem: item => dispatch(addToDoItem(item))\r\n});\r\n\r\nexport default connect(null,mapDispatchToProps)(ToDoItemList);","import './App.css';\n\nimport ToDoItemList from './components/to-do-item-list/to-do-item-list.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h3>To-Do App</h3>\n        <ToDoItemList />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const getNewId = (items) => (\r\n    (items.length > 0) ?\r\n    items.reduce((prev, curr) => (prev.id > curr.id) ? prev : curr, 0 ).id + 1\r\n    : 1\r\n)\r\n\r\n\r\nexport const addToDoToDone = (state,toDoItem) => {\r\n    const { toDoList,doneList } = state;\r\n\r\n    const newToDoList = toDoList.filter(toDo => toDo.id !== toDoItem.id);\r\n    // const max = data.reduce((prev, current) => (prev.y > current.y) ? prev : current)\r\n    const newId = getNewId(doneList);\r\n\r\n    const newDoneList = [ ...doneList, { id: newId, body: toDoItem.body} ]\r\n\r\n    return {...state, \r\n            toDoList: newToDoList, \r\n            doneList: newDoneList \r\n        }\r\n}\r\n\r\nexport const addToDoItem = (toDoList, toDoItem) => {\r\n    const newId = getNewId(toDoList);\r\n\r\n    return [...toDoList, { id: newId, body: toDoItem.body }]\r\n}\r\n    \r\n","import ToDoActionTypes from './to-do.types';\r\nimport { addToDoToDone,addToDoItem } from './to-do.utils';\r\n\r\nconst INITIAL_STATE = {\r\n    toDoList: [\r\n        {\r\n            id: 1,\r\n            body: 'Wash the dishes'\r\n        },\r\n        {\r\n            id: 2,\r\n            body: 'Buy new books'\r\n        },\r\n        {\r\n            id: 3,\r\n            body: 'Get a dog'\r\n        }\r\n    ],\r\n    doneList: [\r\n        {\r\n            id: 1,\r\n            body: 'Pick up laundry'\r\n        },\r\n        {\r\n            id: 2,\r\n            body: 'Get medicines'\r\n        },\r\n        {\r\n            id: 3,\r\n            body: 'Get a cat'\r\n        }\r\n    ],\r\n    isFetching: false,\r\n    errorMessage: null\r\n}\r\n\r\nconst toDoReducer = (state= INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case ToDoActionTypes.FETCH_TODO_START:\r\n            return {\r\n                ...state,\r\n                isFetching: true\r\n            };\r\n        case ToDoActionTypes.FETCH_TODO_SUCCESS:\r\n            return {\r\n                ...state,\r\n                toDoList: action.payload,\r\n                errorMessage: null\r\n            };\r\n        case ToDoActionTypes.FETCH_TODO_FAILURE:\r\n            return {\r\n                ...state,\r\n                errorMessage: action.payload\r\n            };\r\n        case ToDoActionTypes.ADD_TODO_ITEM:\r\n            return {\r\n                ...state,\r\n                toDoList: addToDoItem(state.toDoList, action.payload)\r\n            };\r\n        case ToDoActionTypes.REMOVE_TODO_ITEM:\r\n            return {\r\n                ...state,\r\n                toDoList: state.toDoList.filter(todo => todo.id !== action.payload.id)\r\n            };\r\n        case ToDoActionTypes.ADD_TODO_TO_DONE:\r\n            return {\r\n                ...addToDoToDone(state, action.payload)\r\n            }\r\n        case ToDoActionTypes.REMOVE_DONE_ITEM:\r\n            return {\r\n                ...state,\r\n                doneList: state.doneList.filter(done => done.id !== action.payload.id)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default toDoReducer;","import { combineReducers } from 'redux';\r\n\r\nimport toDoReducer from './to-do/to-do.reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    todos: toDoReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore,applyMiddleware } from 'redux';\r\n\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middlewares = [];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    middlewares.push(logger);\r\n}\r\n\r\nconst store = createStore(rootReducer,applyMiddleware(...middlewares));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}